// Generated by CoffeeScript 1.4.0
(function() {
  var App, Display, Effects,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Effects = (function() {

    function Effects() {
      this.hover = __bind(this.hover, this);
      $('.downloadable').live('mouseover', this.hover);
    }

    Effects.prototype.hover = function(event) {
      var single;
      single = $(event.currentTarget);
      $('.downloadable').addClass('blurred');
      return single.removeClass('blurred');
    };

    return Effects;

  })();

  Display = (function() {

    function Display(app) {
      this.app = app;
      this.print = __bind(this.print, this);

      this.clear = __bind(this.clear, this);

      this.draw = __bind(this.draw, this);

      this.setDimensions = __bind(this.setDimensions, this);

      this.canvas = $("canvas");
      this.ctx = this.canvas[0].getContext('2d');
      this.ctx.fillCircle = function(x, y, r) {
        this.beginPath();
        this.arc(x, y, r, 0, Math.PI * 2, false);
        this.closePath();
        return this.fill();
      };
      this.amount = this.roundom(100);
    }

    Display.prototype.setDimensions = function(width, height) {
      this.width = width;
      this.height = height;
      this.canvas[0].width = this.width;
      return this.canvas[0].height = this.height;
    };

    Display.prototype.draw = function() {
      var num, _i, _ref, _results;
      this.clear();
      _results = [];
      for (num = _i = 1, _ref = this.amount; 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
        this.ctx.fillStyle = "rgba(2555,235,215," + (Math.random()) + ")";
        _results.push(this.ctx.fillCircle(this.roundom(this.width), this.roundom(this.height), this.roundom(this.width / 8)));
      }
      return _results;
    };

    Display.prototype.clear = function() {
      this.ctx.fillStyle = "rgb(" + (this.roundom(200)) + "," + (this.roundom(200)) + "," + (this.roundom(200)) + ")";
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    Display.prototype.roundom = function(int) {
      return Math.ceil(Math.random() * int);
    };

    Display.prototype.print = function() {
      return this.canvas[0].toDataURL();
    };

    return Display;

  })();

  App = (function() {

    function App() {
      this.calculateDimensions = __bind(this.calculateDimensions, this);

      this.make = __bind(this.make, this);

      this.setType = __bind(this.setType, this);
      this.a1Width = 7016;
      this.a1Height = 9922;
      this.display = new Display(this);
      this.effects = new Effects;
      $("#make").click(this.make);
      $(".close").live('click', this.remove);
      $('#type').change(this.setType);
    }

    App.prototype.remove = function() {
      $(this).parent('.downloadable').fadeOut(function() {
        return $(this).remove();
      });
      return false;
    };

    App.prototype.setType = function(event) {
      this.type = $(event.currentTarget).val();
      $('#digital, #print').hide();
      return $("#" + this.type).show();
    };

    App.prototype.make = function() {
      this.calculateDimensions();
      this.display.draw();
      $("body").append("<div class='downloadable'><a href='#' class='close'>x</a><a href='" + (this.display.print()) + "' target='_blank' class='download'><img src='" + (this.display.print()) + "' class='" + this.orientation + "'>Download</a><div>");
      return false;
    };

    App.prototype.calculateDimensions = function() {
      var dimensions, divisor, height, string, width;
      if (this.type === 'print') {
        divisor = $('select#print').val();
        width = Math.round(this.a1Width / divisor);
        height = Math.round(this.a1Height / divisor);
      } else {
        string = $('select#digital').val();
        dimensions = string.split('x');
        height = dimensions[0];
        width = dimensions[1];
      }
      this.orientation = $('select#orientation').val();
      if (this.orientation === 'landscape') {
        return this.display.setDimensions(height, width);
      } else {
        return this.display.setDimensions(width, height);
      }
    };

    return App;

  })();

  $(function() {
    return window.app = new App;
  });

}).call(this);
